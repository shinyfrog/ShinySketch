//
//  SFSketchIconsKit.m
//  (null)
//
//  Created on 18/05/2017.
//  Copyright Â© 2017 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

#import "SFSketchIconsKit.h"


@implementation SFSketchIconsKit

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawEraserToolWithToolFillColor: (UIColor*)toolFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{
    [SFSketchIconsKit drawEraserToolWithFrame: CGRectMake(0, 0, 32, 96) resizing: SFSketchIconsKitResizingBehaviorStretch toolFillColor: toolFillColor toolStrokeColor: toolStrokeColor];
}

+ (void)drawEraserToolWithFrame: (CGRect)targetFrame resizing: (SFSketchIconsKitResizingBehavior)resizing toolFillColor: (UIColor*)toolFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = SFSketchIconsKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 32, 96), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 32, resizedFrame.size.height / 96);


    //// Layer_2
    {
        //// Layer_1-2
        {
            //// Eraser
            {
                //// Bezier Drawing
                UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                [bezierPath moveToPoint: CGPointMake(2.5, 52.25)];
                [bezierPath addLineToPoint: CGPointMake(2.5, 52.25)];
                [bezierPath addCurveToPoint: CGPointMake(1.75, 51.5) controlPoint1: CGPointMake(2.09, 52.25) controlPoint2: CGPointMake(1.75, 51.91)];
                [bezierPath addLineToPoint: CGPointMake(1.75, 9.5)];
                [bezierPath addLineToPoint: CGPointMake(1.75, 9.51)];
                [bezierPath addCurveToPoint: CGPointMake(10.51, 0.75) controlPoint1: CGPointMake(1.75, 4.67) controlPoint2: CGPointMake(5.67, 0.75)];
                [bezierPath addLineToPoint: CGPointMake(28, 0.75)];
                [bezierPath addLineToPoint: CGPointMake(28, 0.75)];
                [bezierPath addCurveToPoint: CGPointMake(30.25, 3) controlPoint1: CGPointMake(29.24, 0.75) controlPoint2: CGPointMake(30.25, 1.76)];
                [bezierPath addLineToPoint: CGPointMake(30.25, 51.5)];
                [bezierPath addLineToPoint: CGPointMake(30.25, 51.5)];
                [bezierPath addCurveToPoint: CGPointMake(29.5, 52.25) controlPoint1: CGPointMake(30.25, 51.91) controlPoint2: CGPointMake(29.91, 52.25)];
                [bezierPath addLineToPoint: CGPointMake(2.5, 52.25)];
                [bezierPath closePath];
                [toolFillColor setFill];
                [bezierPath fill];


                //// Bezier 2 Drawing
                UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
                [bezier2Path moveToPoint: CGPointMake(28, 1.5)];
                [bezier2Path addLineToPoint: CGPointMake(28, 1.5)];
                [bezier2Path addCurveToPoint: CGPointMake(29.5, 3) controlPoint1: CGPointMake(28.83, 1.5) controlPoint2: CGPointMake(29.5, 2.17)];
                [bezier2Path addLineToPoint: CGPointMake(29.5, 51.5)];
                [bezier2Path addLineToPoint: CGPointMake(2.5, 51.5)];
                [bezier2Path addLineToPoint: CGPointMake(2.5, 9.5)];
                [bezier2Path addLineToPoint: CGPointMake(2.5, 9.5)];
                [bezier2Path addCurveToPoint: CGPointMake(10.5, 1.5) controlPoint1: CGPointMake(2.5, 5.08) controlPoint2: CGPointMake(6.08, 1.5)];
                [bezier2Path addLineToPoint: CGPointMake(28, 1.5)];
                [bezier2Path closePath];
                [bezier2Path moveToPoint: CGPointMake(28, 0)];
                [bezier2Path addLineToPoint: CGPointMake(10.5, 0)];
                [bezier2Path addLineToPoint: CGPointMake(10.51, -0)];
                [bezier2Path addCurveToPoint: CGPointMake(1, 9.51) controlPoint1: CGPointMake(5.26, -0) controlPoint2: CGPointMake(1, 4.26)];
                [bezier2Path addLineToPoint: CGPointMake(1, 51.5)];
                [bezier2Path addLineToPoint: CGPointMake(1, 51.5)];
                [bezier2Path addCurveToPoint: CGPointMake(2.5, 53) controlPoint1: CGPointMake(1, 52.33) controlPoint2: CGPointMake(1.67, 53)];
                [bezier2Path addLineToPoint: CGPointMake(29.5, 53)];
                [bezier2Path addLineToPoint: CGPointMake(29.5, 53)];
                [bezier2Path addCurveToPoint: CGPointMake(31, 51.5) controlPoint1: CGPointMake(30.33, 53) controlPoint2: CGPointMake(31, 52.33)];
                [bezier2Path addLineToPoint: CGPointMake(31, 3)];
                [bezier2Path addLineToPoint: CGPointMake(31, 3)];
                [bezier2Path addCurveToPoint: CGPointMake(28, 0) controlPoint1: CGPointMake(31, 1.34) controlPoint2: CGPointMake(29.66, 0)];
                [bezier2Path closePath];
                [toolStrokeColor setFill];
                [bezier2Path fill];


                //// Rectangle Drawing
                UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0.75, 14.75, 30.5, 80.5) cornerRadius: 0.75];
                [toolFillColor setFill];
                [rectanglePath fill];


                //// Bezier 3 Drawing
                UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
                [bezier3Path moveToPoint: CGPointMake(30.5, 15.5)];
                [bezier3Path addLineToPoint: CGPointMake(30.5, 94.5)];
                [bezier3Path addLineToPoint: CGPointMake(1.5, 94.5)];
                [bezier3Path addLineToPoint: CGPointMake(1.5, 15.5)];
                [bezier3Path addLineToPoint: CGPointMake(30.5, 15.5)];
                [bezier3Path closePath];
                [bezier3Path moveToPoint: CGPointMake(30.5, 14)];
                [bezier3Path addLineToPoint: CGPointMake(1.5, 14)];
                [bezier3Path addLineToPoint: CGPointMake(1.5, 14)];
                [bezier3Path addCurveToPoint: CGPointMake(0, 15.5) controlPoint1: CGPointMake(0.67, 14) controlPoint2: CGPointMake(0, 14.67)];
                [bezier3Path addLineToPoint: CGPointMake(0, 94.5)];
                [bezier3Path addLineToPoint: CGPointMake(0, 94.5)];
                [bezier3Path addCurveToPoint: CGPointMake(1.5, 96) controlPoint1: CGPointMake(0, 95.33) controlPoint2: CGPointMake(0.67, 96)];
                [bezier3Path addLineToPoint: CGPointMake(30.5, 96)];
                [bezier3Path addLineToPoint: CGPointMake(30.5, 96)];
                [bezier3Path addCurveToPoint: CGPointMake(32, 94.5) controlPoint1: CGPointMake(31.33, 96) controlPoint2: CGPointMake(32, 95.33)];
                [bezier3Path addLineToPoint: CGPointMake(32, 15.5)];
                [bezier3Path addLineToPoint: CGPointMake(32, 15.5)];
                [bezier3Path addCurveToPoint: CGPointMake(30.5, 14) controlPoint1: CGPointMake(32, 14.67) controlPoint2: CGPointMake(31.33, 14)];
                [bezier3Path closePath];
                [toolStrokeColor setFill];
                [bezier3Path fill];


                //// Bezier 4 Drawing
                UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
                [bezier4Path moveToPoint: CGPointMake(25, 21)];
                [bezier4Path addLineToPoint: CGPointMake(31, 15)];
                [toolStrokeColor setStroke];
                bezier4Path.lineWidth = 1;
                bezier4Path.miterLimit = 4;
                bezier4Path.lineCapStyle = kCGLineCapRound;
                bezier4Path.lineJoinStyle = kCGLineJoinRound;
                [bezier4Path stroke];


                //// Bezier 5 Drawing
                UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
                [bezier5Path moveToPoint: CGPointMake(21, 21)];
                [bezier5Path addLineToPoint: CGPointMake(27, 15)];
                [toolStrokeColor setStroke];
                bezier5Path.lineWidth = 1;
                bezier5Path.miterLimit = 4;
                bezier5Path.lineCapStyle = kCGLineCapRound;
                bezier5Path.lineJoinStyle = kCGLineJoinRound;
                [bezier5Path stroke];


                //// Bezier 6 Drawing
                UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
                [bezier6Path moveToPoint: CGPointMake(17, 21)];
                [bezier6Path addLineToPoint: CGPointMake(23, 15)];
                [toolStrokeColor setStroke];
                bezier6Path.lineWidth = 1;
                bezier6Path.miterLimit = 4;
                bezier6Path.lineCapStyle = kCGLineCapRound;
                bezier6Path.lineJoinStyle = kCGLineJoinRound;
                [bezier6Path stroke];
            }
        }
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawPenToolWithToolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{
    [SFSketchIconsKit drawPenToolWithFrame: CGRectMake(0, 0, 22, 116) resizing: SFSketchIconsKitResizingBehaviorStretch toolFillColor: toolFillColor pointFillColor: pointFillColor toolStrokeColor: toolStrokeColor];
}

+ (void)drawPenToolWithFrame: (CGRect)targetFrame resizing: (SFSketchIconsKitResizingBehavior)resizing toolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = SFSketchIconsKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 22, 116), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 22, resizedFrame.size.height / 116);


    //// Layer_2
    {
        //// Layer_1-2
        {
            //// Pen
            {
                //// Bezier Drawing
                UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                [bezierPath moveToPoint: CGPointMake(1.5, 114.33)];
                [bezierPath addLineToPoint: CGPointMake(1.5, 114.33)];
                [bezierPath addCurveToPoint: CGPointMake(0.75, 113.58) controlPoint1: CGPointMake(1.09, 114.33) controlPoint2: CGPointMake(0.75, 113.99)];
                [bezierPath addLineToPoint: CGPointMake(0.75, 36.48)];
                [bezierPath addLineToPoint: CGPointMake(0.75, 36.47)];
                [bezierPath addCurveToPoint: CGPointMake(1.55, 30.75) controlPoint1: CGPointMake(0.75, 34.53) controlPoint2: CGPointMake(1.02, 32.61)];
                [bezierPath addLineToPoint: CGPointMake(6.85, 12.87)];
                [bezierPath addLineToPoint: CGPointMake(6.85, 12.87)];
                [bezierPath addCurveToPoint: CGPointMake(7.57, 12.33) controlPoint1: CGPointMake(6.94, 12.55) controlPoint2: CGPointMake(7.24, 12.33)];
                [bezierPath addLineToPoint: CGPointMake(14.42, 12.33)];
                [bezierPath addLineToPoint: CGPointMake(14.42, 12.33)];
                [bezierPath addCurveToPoint: CGPointMake(15.14, 12.87) controlPoint1: CGPointMake(14.75, 12.33) controlPoint2: CGPointMake(15.05, 12.55)];
                [bezierPath addLineToPoint: CGPointMake(20.4, 30.59)];
                [bezierPath addLineToPoint: CGPointMake(20.45, 30.75)];
                [bezierPath addCurveToPoint: CGPointMake(21.25, 36.47) controlPoint1: CGPointMake(20.98, 32.61) controlPoint2: CGPointMake(21.25, 34.53)];
                [bezierPath addLineToPoint: CGPointMake(21.25, 113.58)];
                [bezierPath addLineToPoint: CGPointMake(21.25, 113.58)];
                [bezierPath addCurveToPoint: CGPointMake(20.5, 114.33) controlPoint1: CGPointMake(21.25, 113.99) controlPoint2: CGPointMake(20.91, 114.33)];
                [bezierPath addLineToPoint: CGPointMake(1.5, 114.33)];
                [bezierPath closePath];
                [toolFillColor setFill];
                [bezierPath fill];


                //// Bezier 2 Drawing
                UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
                [bezier2Path moveToPoint: CGPointMake(14.43, 13.08)];
                [bezier2Path addLineToPoint: CGPointMake(19.68, 30.8)];
                [bezier2Path addLineToPoint: CGPointMake(19.73, 30.96)];
                [bezier2Path addCurveToPoint: CGPointMake(20.5, 36.47) controlPoint1: CGPointMake(20.24, 32.75) controlPoint2: CGPointMake(20.5, 34.6)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 113.58)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 113.58)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 36.48)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 36.47)];
                [bezier2Path addCurveToPoint: CGPointMake(2.27, 30.96) controlPoint1: CGPointMake(1.5, 34.6) controlPoint2: CGPointMake(1.76, 32.75)];
                [bezier2Path addLineToPoint: CGPointMake(7.57, 13.08)];
                [bezier2Path addLineToPoint: CGPointMake(14.42, 13.08)];
                [bezier2Path moveToPoint: CGPointMake(14.42, 11.58)];
                [bezier2Path addLineToPoint: CGPointMake(7.57, 11.58)];
                [bezier2Path addLineToPoint: CGPointMake(7.57, 11.58)];
                [bezier2Path addCurveToPoint: CGPointMake(6.13, 12.64) controlPoint1: CGPointMake(6.91, 11.58) controlPoint2: CGPointMake(6.33, 12.01)];
                [bezier2Path addLineToPoint: CGPointMake(0.89, 30.37)];
                [bezier2Path addLineToPoint: CGPointMake(0.94, 30.21)];
                [bezier2Path addCurveToPoint: CGPointMake(-0, 36.49) controlPoint1: CGPointMake(0.32, 32.24) controlPoint2: CGPointMake(-0, 34.36)];
                [bezier2Path addLineToPoint: CGPointMake(0, 113.58)];
                [bezier2Path addLineToPoint: CGPointMake(0, 113.58)];
                [bezier2Path addCurveToPoint: CGPointMake(1.5, 115.08) controlPoint1: CGPointMake(0, 114.41) controlPoint2: CGPointMake(0.67, 115.08)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 115.08)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 115.08)];
                [bezier2Path addCurveToPoint: CGPointMake(22, 113.58) controlPoint1: CGPointMake(21.33, 115.08) controlPoint2: CGPointMake(22, 114.41)];
                [bezier2Path addLineToPoint: CGPointMake(22, 36.48)];
                [bezier2Path addLineToPoint: CGPointMake(22, 36.49)];
                [bezier2Path addCurveToPoint: CGPointMake(21.06, 30.21) controlPoint1: CGPointMake(22, 34.36) controlPoint2: CGPointMake(21.68, 32.24)];
                [bezier2Path addLineToPoint: CGPointMake(15.87, 12.65)];
                [bezier2Path addLineToPoint: CGPointMake(15.87, 12.64)];
                [bezier2Path addCurveToPoint: CGPointMake(14.43, 11.58) controlPoint1: CGPointMake(15.67, 12.01) controlPoint2: CGPointMake(15.09, 11.58)];
                [bezier2Path addLineToPoint: CGPointMake(14.42, 11.58)];
                [bezier2Path closePath];
                [toolStrokeColor setFill];
                [bezier2Path fill];


                //// Bezier 3 Drawing
                UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
                [bezier3Path moveToPoint: CGPointMake(1, 34.08)];
                [bezier3Path addLineToPoint: CGPointMake(21, 34.08)];
                [toolFillColor setFill];
                [bezier3Path fill];
                [toolStrokeColor setStroke];
                bezier3Path.lineWidth = 1;
                bezier3Path.miterLimit = 4;
                bezier3Path.lineCapStyle = kCGLineCapRound;
                bezier3Path.lineJoinStyle = kCGLineJoinRound;
                [bezier3Path stroke];


                //// Bezier 4 Drawing
                UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
                [bezier4Path moveToPoint: CGPointMake(17.25, 76.52)];
                [bezier4Path addLineToPoint: CGPointMake(17.25, 37.78)];
                [toolStrokeColor setStroke];
                bezier4Path.lineWidth = 1.5;
                bezier4Path.miterLimit = 4;
                bezier4Path.lineCapStyle = kCGLineCapRound;
                bezier4Path.lineJoinStyle = kCGLineJoinRound;
                [bezier4Path stroke];


                //// Bezier 5 Drawing
                UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
                [bezier5Path moveToPoint: CGPointMake(12.44, 1.08)];
                [bezier5Path addLineToPoint: CGPointMake(12.44, 1.09)];
                [bezier5Path addCurveToPoint: CGPointMake(10.59, 0.06) controlPoint1: CGPointMake(12.21, 0.29) controlPoint2: CGPointMake(11.38, -0.17)];
                [bezier5Path addCurveToPoint: CGPointMake(9.57, 1.06) controlPoint1: CGPointMake(10.1, 0.2) controlPoint2: CGPointMake(9.71, 0.58)];
                [bezier5Path addLineToPoint: CGPointMake(6.75, 10.58)];
                [bezier5Path addLineToPoint: CGPointMake(15.25, 10.58)];
                [bezier5Path addLineToPoint: CGPointMake(12.44, 1.08)];
                [bezier5Path closePath];
                [pointFillColor setFill];
                [bezier5Path fill];
            }
        }
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawMarkerToolWithToolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{
    [SFSketchIconsKit drawMarkerToolWithFrame: CGRectMake(0, 0, 22, 115) resizing: SFSketchIconsKitResizingBehaviorStretch toolFillColor: toolFillColor pointFillColor: pointFillColor toolStrokeColor: toolStrokeColor];
}

+ (void)drawMarkerToolWithFrame: (CGRect)targetFrame resizing: (SFSketchIconsKitResizingBehavior)resizing toolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = SFSketchIconsKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 22, 115), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 22, resizedFrame.size.height / 115);


    //// Layer_2
    {
        //// Layer_1-2
        {
            //// Marker
            {
                //// Bezier Drawing
                UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                [bezierPath moveToPoint: CGPointMake(1.5, 114.2)];
                [bezierPath addLineToPoint: CGPointMake(1.5, 114.2)];
                [bezierPath addCurveToPoint: CGPointMake(0.75, 113.45) controlPoint1: CGPointMake(1.09, 114.2) controlPoint2: CGPointMake(0.75, 113.86)];
                [bezierPath addLineToPoint: CGPointMake(0.75, 33.65)];
                [bezierPath addLineToPoint: CGPointMake(0.75, 33.58)];
                [bezierPath addCurveToPoint: CGPointMake(1.61, 28.7) controlPoint1: CGPointMake(0.75, 31.92) controlPoint2: CGPointMake(1.04, 30.27)];
                [bezierPath addLineToPoint: CGPointMake(4.75, 21.25)];
                [bezierPath addLineToPoint: CGPointMake(4.75, 13.95)];
                [bezierPath addLineToPoint: CGPointMake(4.75, 13.95)];
                [bezierPath addCurveToPoint: CGPointMake(5.5, 13.2) controlPoint1: CGPointMake(4.75, 13.54) controlPoint2: CGPointMake(5.09, 13.2)];
                [bezierPath addLineToPoint: CGPointMake(16.5, 13.2)];
                [bezierPath addLineToPoint: CGPointMake(16.5, 13.2)];
                [bezierPath addCurveToPoint: CGPointMake(17.25, 13.95) controlPoint1: CGPointMake(16.91, 13.2) controlPoint2: CGPointMake(17.25, 13.54)];
                [bezierPath addLineToPoint: CGPointMake(17.25, 21.3)];
                [bezierPath addLineToPoint: CGPointMake(20.35, 28.67)];
                [bezierPath addLineToPoint: CGPointMake(20.39, 28.77)];
                [bezierPath addCurveToPoint: CGPointMake(21.25, 33.66) controlPoint1: CGPointMake(20.96, 30.34) controlPoint2: CGPointMake(21.25, 32)];
                [bezierPath addLineToPoint: CGPointMake(21.25, 113.47)];
                [bezierPath addLineToPoint: CGPointMake(21.25, 113.47)];
                [bezierPath addCurveToPoint: CGPointMake(20.5, 114.22) controlPoint1: CGPointMake(21.25, 113.88) controlPoint2: CGPointMake(20.91, 114.22)];
                [bezierPath addLineToPoint: CGPointMake(1.5, 114.2)];
                [bezierPath closePath];
                [toolFillColor setFill];
                [bezierPath fill];


                //// Bezier 2 Drawing
                UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
                [bezier2Path moveToPoint: CGPointMake(16.5, 13.95)];
                [bezier2Path addLineToPoint: CGPointMake(16.5, 21.45)];
                [bezier2Path addLineToPoint: CGPointMake(19.66, 29)];
                [bezier2Path addLineToPoint: CGPointMake(19.68, 29.06)];
                [bezier2Path addCurveToPoint: CGPointMake(20.5, 33.7) controlPoint1: CGPointMake(20.22, 30.55) controlPoint2: CGPointMake(20.5, 32.12)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 113.49)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 113.49)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 33.65)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 33.7)];
                [bezier2Path addCurveToPoint: CGPointMake(2.32, 29.06) controlPoint1: CGPointMake(1.5, 32.12) controlPoint2: CGPointMake(1.78, 30.55)];
                [bezier2Path addLineToPoint: CGPointMake(5.5, 21.45)];
                [bezier2Path addLineToPoint: CGPointMake(5.5, 13.95)];
                [bezier2Path addLineToPoint: CGPointMake(16.5, 13.95)];
                [bezier2Path closePath];
                [bezier2Path moveToPoint: CGPointMake(16.5, 12.45)];
                [bezier2Path addLineToPoint: CGPointMake(5.5, 12.45)];
                [bezier2Path addLineToPoint: CGPointMake(5.5, 12.45)];
                [bezier2Path addCurveToPoint: CGPointMake(4, 13.95) controlPoint1: CGPointMake(4.67, 12.45) controlPoint2: CGPointMake(4, 13.12)];
                [bezier2Path addLineToPoint: CGPointMake(4, 21.15)];
                [bezier2Path addLineToPoint: CGPointMake(1, 28.38)];
                [bezier2Path addLineToPoint: CGPointMake(1, 28.44)];
                [bezier2Path addLineToPoint: CGPointMake(1, 28.45)];
                [bezier2Path addCurveToPoint: CGPointMake(0, 33.57) controlPoint1: CGPointMake(0.37, 30.09) controlPoint2: CGPointMake(0.03, 31.82)];
                [bezier2Path addLineToPoint: CGPointMake(0, 113.45)];
                [bezier2Path addLineToPoint: CGPointMake(0, 113.45)];
                [bezier2Path addCurveToPoint: CGPointMake(1.5, 114.95) controlPoint1: CGPointMake(0, 114.28) controlPoint2: CGPointMake(0.67, 114.95)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 114.95)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 114.95)];
                [bezier2Path addCurveToPoint: CGPointMake(22, 113.45) controlPoint1: CGPointMake(21.33, 114.95) controlPoint2: CGPointMake(22, 114.28)];
                [bezier2Path addLineToPoint: CGPointMake(22, 33.65)];
                [bezier2Path addLineToPoint: CGPointMake(22, 33.64)];
                [bezier2Path addCurveToPoint: CGPointMake(21.1, 28.51) controlPoint1: CGPointMake(22, 31.89) controlPoint2: CGPointMake(21.69, 30.15)];
                [bezier2Path addLineToPoint: CGPointMake(21.07, 28.38)];
                [bezier2Path addLineToPoint: CGPointMake(18.07, 21.15)];
                [bezier2Path addLineToPoint: CGPointMake(18.07, 13.95)];
                [bezier2Path addLineToPoint: CGPointMake(18.07, 13.95)];
                [bezier2Path addCurveToPoint: CGPointMake(16.57, 12.45) controlPoint1: CGPointMake(18.07, 13.12) controlPoint2: CGPointMake(17.4, 12.45)];
                [bezier2Path addLineToPoint: CGPointMake(16.5, 12.45)];
                [bezier2Path closePath];
                [toolStrokeColor setFill];
                [bezier2Path fill];


                //// Bezier 3 Drawing
                UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
                [bezier3Path moveToPoint: CGPointMake(1.5, 32.09)];
                [bezier3Path addLineToPoint: CGPointMake(20.5, 32.09)];
                [toolFillColor setFill];
                [bezier3Path fill];
                [toolStrokeColor setStroke];
                bezier3Path.lineWidth = 1;
                bezier3Path.miterLimit = 4;
                bezier3Path.lineCapStyle = kCGLineCapRound;
                bezier3Path.lineJoinStyle = kCGLineJoinRound;
                [bezier3Path stroke];


                //// Bezier 4 Drawing
                UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
                [bezier4Path moveToPoint: CGPointMake(5.5, 11.45)];
                [bezier4Path addLineToPoint: CGPointMake(16.5, 11.45)];
                [bezier4Path addLineToPoint: CGPointMake(16.5, 1)];
                [bezier4Path addLineToPoint: CGPointMake(16.5, 1)];
                [bezier4Path addCurveToPoint: CGPointMake(15.5, 0) controlPoint1: CGPointMake(16.5, 0.45) controlPoint2: CGPointMake(16.05, 0)];
                [bezier4Path addCurveToPoint: CGPointMake(15.09, 0.09) controlPoint1: CGPointMake(15.36, 0) controlPoint2: CGPointMake(15.22, 0.03)];
                [bezier4Path addLineToPoint: CGPointMake(6.09, 4.18)];
                [bezier4Path addLineToPoint: CGPointMake(6.09, 4.18)];
                [bezier4Path addCurveToPoint: CGPointMake(5.5, 5.09) controlPoint1: CGPointMake(5.73, 4.34) controlPoint2: CGPointMake(5.5, 4.7)];
                [bezier4Path addLineToPoint: CGPointMake(5.5, 11.45)];
                [bezier4Path closePath];
                [pointFillColor setFill];
                [bezier4Path fill];


                //// Bezier 5 Drawing
                UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
                [bezier5Path moveToPoint: CGPointMake(17, 72.95)];
                [bezier5Path addLineToPoint: CGPointMake(17, 35.95)];
                [toolStrokeColor setStroke];
                bezier5Path.lineWidth = 1;
                bezier5Path.miterLimit = 4;
                bezier5Path.lineCapStyle = kCGLineCapRound;
                bezier5Path.lineJoinStyle = kCGLineJoinRound;
                [bezier5Path stroke];
            }
        }
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawColorToolWithFrame: (CGRect)frame toolFillColor: (UIColor*)toolFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{

    //// Oval bg Drawing
    UIBezierPath* ovalBgPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + floor(frame.size.width * 0.03750) + 0.5, CGRectGetMinY(frame) + floor(frame.size.height * 0.03750) + 0.5, floor(frame.size.width * 0.96250) - floor(frame.size.width * 0.03750), floor(frame.size.height * 0.96250) - floor(frame.size.height * 0.03750))];
    [toolFillColor setFill];
    [ovalBgPath fill];


    //// Oval stroke Drawing
    UIBezierPath* ovalStrokePath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + floor(frame.size.width * 0.06250) + 0.5, CGRectGetMinY(frame) + floor(frame.size.height * 0.06250) + 0.5, floor(frame.size.width * 0.95000 + 0.5) - floor(frame.size.width * 0.06250) - 0.5, floor(frame.size.height * 0.95000 + 0.5) - floor(frame.size.height * 0.06250) - 0.5)];
    [toolStrokeColor setStroke];
    ovalStrokePath.lineWidth = 1.5;
    [ovalStrokePath stroke];
}

+ (void)drawPointToolWithFrame: (CGRect)frame toolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor pointStrokeColor: (UIColor*)pointStrokeColor pointRect: (CGRect)pointRect strokePointRect: (CGRect)strokePointRect
{

    //// Oval bg Drawing
    UIBezierPath* ovalBgPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + floor(frame.size.width * 0.03750) + 0.5, CGRectGetMinY(frame) + floor(frame.size.height * 0.03750) + 0.5, floor(frame.size.width * 0.96250) - floor(frame.size.width * 0.03750), floor(frame.size.height * 0.96250) - floor(frame.size.height * 0.03750))];
    [toolFillColor setFill];
    [ovalBgPath fill];


    //// Oval stroke Drawing
    UIBezierPath* ovalStrokePath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + floor(frame.size.width * 0.06250) + 0.5, CGRectGetMinY(frame) + floor(frame.size.height * 0.06250) + 0.5, floor(frame.size.width * 0.95000 + 0.5) - floor(frame.size.width * 0.06250) - 0.5, floor(frame.size.height * 0.95000 + 0.5) - floor(frame.size.height * 0.06250) - 0.5)];
    [toolStrokeColor setStroke];
    ovalStrokePath.lineWidth = 1.5;
    [ovalStrokePath stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: pointRect];
    [pointFillColor setFill];
    [ovalPath fill];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: strokePointRect];
    [pointStrokeColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];
}

+ (void)drawCloseIconWithToolStrokeColor: (UIColor*)toolStrokeColor
{
    [SFSketchIconsKit drawCloseIconWithFrame: CGRectMake(0, 0, 40, 40) resizing: SFSketchIconsKitResizingBehaviorStretch toolStrokeColor: toolStrokeColor];
}

+ (void)drawCloseIconWithFrame: (CGRect)targetFrame resizing: (SFSketchIconsKitResizingBehavior)resizing toolStrokeColor: (UIColor*)toolStrokeColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = SFSketchIconsKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 40, 40), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 40, resizedFrame.size.height / 40);


    //// Group
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(26.86, 26.86)];
        [bezier2Path addCurveToPoint: CGPointMake(26.01, 26.71) controlPoint1: CGPointMake(26.66, 27.05) controlPoint2: CGPointMake(26.28, 26.99)];
        [bezier2Path addLineToPoint: CGPointMake(13.57, 14.28)];
        [bezier2Path addCurveToPoint: CGPointMake(13.42, 13.42) controlPoint1: CGPointMake(13.29, 14) controlPoint2: CGPointMake(13.23, 13.62)];
        [bezier2Path addLineToPoint: CGPointMake(13.42, 13.42)];
        [bezier2Path addCurveToPoint: CGPointMake(14.28, 13.57) controlPoint1: CGPointMake(13.62, 13.23) controlPoint2: CGPointMake(14, 13.29)];
        [bezier2Path addLineToPoint: CGPointMake(26.71, 26.01)];
        [bezier2Path addCurveToPoint: CGPointMake(26.86, 26.86) controlPoint1: CGPointMake(26.99, 26.28) controlPoint2: CGPointMake(27.05, 26.66)];
        [bezier2Path closePath];
        [toolStrokeColor setStroke];
        bezier2Path.lineWidth = 1;
        bezier2Path.miterLimit = 4;
        [bezier2Path stroke];


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(13.14, 26.86)];
        [bezierPath addCurveToPoint: CGPointMake(13.99, 26.71) controlPoint1: CGPointMake(13.34, 27.05) controlPoint2: CGPointMake(13.72, 26.99)];
        [bezierPath addLineToPoint: CGPointMake(26.43, 14.28)];
        [bezierPath addCurveToPoint: CGPointMake(26.58, 13.42) controlPoint1: CGPointMake(26.71, 14) controlPoint2: CGPointMake(26.77, 13.62)];
        [bezierPath addLineToPoint: CGPointMake(26.58, 13.42)];
        [bezierPath addCurveToPoint: CGPointMake(25.72, 13.57) controlPoint1: CGPointMake(26.38, 13.23) controlPoint2: CGPointMake(26, 13.29)];
        [bezierPath addLineToPoint: CGPointMake(13.29, 26.01)];
        [bezierPath addCurveToPoint: CGPointMake(13.14, 26.86) controlPoint1: CGPointMake(13.01, 26.28) controlPoint2: CGPointMake(12.95, 26.66)];
        [bezierPath closePath];
        [toolStrokeColor setStroke];
        bezierPath.lineWidth = 1;
        bezierPath.miterLimit = 4;
        [bezierPath stroke];
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawRedoIconWithIconStrokeColor: (UIColor*)iconStrokeColor
{
    [SFSketchIconsKit drawRedoIconWithFrame: CGRectMake(0, 0, 20, 30) resizing: SFSketchIconsKitResizingBehaviorStretch iconStrokeColor: iconStrokeColor];
}

+ (void)drawRedoIconWithFrame: (CGRect)targetFrame resizing: (SFSketchIconsKitResizingBehavior)resizing iconStrokeColor: (UIColor*)iconStrokeColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = SFSketchIconsKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 20, 30), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 30);


    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(6.34, 21.24)];
    [bezierPath addCurveToPoint: CGPointMake(5.32, 21.24) controlPoint1: CGPointMake(6.34, 21.24) controlPoint2: CGPointMake(5.57, 21.26)];
    [bezierPath addCurveToPoint: CGPointMake(0.75, 16.62) controlPoint1: CGPointMake(0.75, 20.99) controlPoint2: CGPointMake(0.75, 16.62)];
    [bezierPath addCurveToPoint: CGPointMake(5.32, 12) controlPoint1: CGPointMake(0.75, 16.62) controlPoint2: CGPointMake(0.75, 12)];
    [bezierPath addLineToPoint: CGPointMake(17.76, 12)];
    [bezierPath moveToPoint: CGPointMake(13.51, 7.75)];
    [bezierPath addLineToPoint: CGPointMake(17.76, 12)];
    [bezierPath addLineToPoint: CGPointMake(13.51, 16.5)];
    [iconStrokeColor setStroke];
    bezierPath.lineWidth = 1.5;
    bezierPath.lineCapStyle = kCGLineCapRound;
    [bezierPath stroke];
    
    CGContextRestoreGState(context);

}

+ (void)drawUndoIconWithIconStrokeColor: (UIColor*)iconStrokeColor
{
    [SFSketchIconsKit drawUndoIconWithFrame: CGRectMake(0, 0, 20, 30) resizing: SFSketchIconsKitResizingBehaviorStretch iconStrokeColor: iconStrokeColor];
}

+ (void)drawUndoIconWithFrame: (CGRect)targetFrame resizing: (SFSketchIconsKitResizingBehavior)resizing iconStrokeColor: (UIColor*)iconStrokeColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = SFSketchIconsKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 20, 30), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 30);


    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(13.47, 21.24)];
    [bezierPath addCurveToPoint: CGPointMake(14.49, 21.24) controlPoint1: CGPointMake(13.47, 21.24) controlPoint2: CGPointMake(14.24, 21.26)];
    [bezierPath addCurveToPoint: CGPointMake(19.06, 16.62) controlPoint1: CGPointMake(19.06, 20.99) controlPoint2: CGPointMake(19.06, 16.62)];
    [bezierPath addCurveToPoint: CGPointMake(14.49, 12) controlPoint1: CGPointMake(19.06, 16.62) controlPoint2: CGPointMake(19.06, 12)];
    [bezierPath addLineToPoint: CGPointMake(2.05, 12)];
    [bezierPath moveToPoint: CGPointMake(6.3, 7.75)];
    [bezierPath addLineToPoint: CGPointMake(2.05, 12)];
    [bezierPath addLineToPoint: CGPointMake(6.3, 16.5)];
    [iconStrokeColor setStroke];
    bezierPath.lineWidth = 1.5;
    bezierPath.lineCapStyle = kCGLineCapRound;
    [bezierPath stroke];
    
    CGContextRestoreGState(context);

}

+ (void)drawBackIconWithIconStrokeColor: (UIColor*)iconStrokeColor
{
    [SFSketchIconsKit drawBackIconWithFrame: CGRectMake(0, 0, 20, 30) resizing: SFSketchIconsKitResizingBehaviorStretch iconStrokeColor: iconStrokeColor];
}

+ (void)drawBackIconWithFrame: (CGRect)targetFrame resizing: (SFSketchIconsKitResizingBehavior)resizing iconStrokeColor: (UIColor*)iconStrokeColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = SFSketchIconsKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 20, 30), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 30);


    //// Line Drawing
    UIBezierPath* linePath = [UIBezierPath bezierPath];
    [linePath moveToPoint: CGPointMake(10, 16)];
    [linePath addLineToPoint: CGPointMake(2, 24)];
    [linePath addLineToPoint: CGPointMake(10, 16)];
    [linePath addLineToPoint: CGPointMake(2, 8)];
    [linePath addLineToPoint: CGPointMake(10, 16)];
    [linePath closePath];
    [linePath moveToPoint: CGPointMake(10, 16)];
    [linePath addLineToPoint: CGPointMake(18, 8)];
    [linePath addLineToPoint: CGPointMake(10, 16)];
    [linePath addLineToPoint: CGPointMake(18, 24)];
    [linePath addLineToPoint: CGPointMake(10, 16)];
    [linePath closePath];
    [iconStrokeColor setStroke];
    linePath.lineWidth = 1.5;
    linePath.miterLimit = 4;
    linePath.lineCapStyle = kCGLineCapSquare;
    [linePath stroke];
    
    CGContextRestoreGState(context);

}

+ (void)drawShareIconWithIconStrokeColor: (UIColor*)iconStrokeColor
{
    [SFSketchIconsKit drawShareIconWithFrame: CGRectMake(0, 0, 19, 30) resizing: SFSketchIconsKitResizingBehaviorStretch iconStrokeColor: iconStrokeColor];
}

+ (void)drawShareIconWithFrame: (CGRect)targetFrame resizing: (SFSketchIconsKitResizingBehavior)resizing iconStrokeColor: (UIColor*)iconStrokeColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = SFSketchIconsKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 19, 30), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 19, resizedFrame.size.height / 30);


    //// Shape 4 Drawing
    UIBezierPath* shape4Path = [UIBezierPath bezierPath];
    [shape4Path moveToPoint: CGPointMake(6, 11)];
    [shape4Path addLineToPoint: CGPointMake(2, 11)];
    [shape4Path addLineToPoint: CGPointMake(2, 25.5)];
    [shape4Path addLineToPoint: CGPointMake(17, 25.5)];
    [shape4Path addLineToPoint: CGPointMake(17, 11)];
    [shape4Path addLineToPoint: CGPointMake(13, 11)];
    [iconStrokeColor setStroke];
    shape4Path.lineWidth = 1;
    shape4Path.miterLimit = 4;
    [shape4Path stroke];


    //// Shape 5 Drawing
    UIBezierPath* shape5Path = [UIBezierPath bezierPath];
    [shape5Path moveToPoint: CGPointMake(9.5, 5)];
    [shape5Path addLineToPoint: CGPointMake(9.5, 18.5)];
    [iconStrokeColor setStroke];
    shape5Path.lineWidth = 1.5;
    shape5Path.miterLimit = 4;
    [shape5Path stroke];


    //// Shape 6 Drawing
    UIBezierPath* shape6Path = [UIBezierPath bezierPath];
    [shape6Path moveToPoint: CGPointMake(6, 7.5)];
    [shape6Path addLineToPoint: CGPointMake(9.5, 4)];
    [shape6Path addLineToPoint: CGPointMake(13, 7.5)];
    [iconStrokeColor setStroke];
    shape6Path.lineWidth = 1.5;
    shape6Path.miterLimit = 4;
    shape6Path.lineCapStyle = kCGLineCapRound;
    [shape6Path stroke];
    
    CGContextRestoreGState(context);

}

+ (void)drawMarkerToolStrokeWithToolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor pointStrokeColor: (UIColor*)pointStrokeColor
{
    [SFSketchIconsKit drawMarkerToolStrokeWithFrame: CGRectMake(0, 0, 22, 115) resizing: SFSketchIconsKitResizingBehaviorStretch toolFillColor: toolFillColor pointFillColor: pointFillColor toolStrokeColor: toolStrokeColor pointStrokeColor: pointStrokeColor];
}

+ (void)drawMarkerToolStrokeWithFrame: (CGRect)targetFrame resizing: (SFSketchIconsKitResizingBehavior)resizing toolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor pointStrokeColor: (UIColor*)pointStrokeColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = SFSketchIconsKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 22, 115), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 22, resizedFrame.size.height / 115);


    //// Layer_2
    {
        //// Layer_1-2
        {
            //// Marker
            {
                //// Bezier Drawing
                UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                [bezierPath moveToPoint: CGPointMake(1.5, 114.2)];
                [bezierPath addLineToPoint: CGPointMake(1.5, 114.2)];
                [bezierPath addCurveToPoint: CGPointMake(0.75, 113.45) controlPoint1: CGPointMake(1.09, 114.2) controlPoint2: CGPointMake(0.75, 113.86)];
                [bezierPath addLineToPoint: CGPointMake(0.75, 33.65)];
                [bezierPath addLineToPoint: CGPointMake(0.75, 33.58)];
                [bezierPath addCurveToPoint: CGPointMake(1.61, 28.7) controlPoint1: CGPointMake(0.75, 31.92) controlPoint2: CGPointMake(1.04, 30.27)];
                [bezierPath addLineToPoint: CGPointMake(4.75, 21.25)];
                [bezierPath addLineToPoint: CGPointMake(4.75, 13.95)];
                [bezierPath addLineToPoint: CGPointMake(4.75, 13.95)];
                [bezierPath addCurveToPoint: CGPointMake(5.5, 13.2) controlPoint1: CGPointMake(4.75, 13.54) controlPoint2: CGPointMake(5.09, 13.2)];
                [bezierPath addLineToPoint: CGPointMake(16.5, 13.2)];
                [bezierPath addLineToPoint: CGPointMake(16.5, 13.2)];
                [bezierPath addCurveToPoint: CGPointMake(17.25, 13.95) controlPoint1: CGPointMake(16.91, 13.2) controlPoint2: CGPointMake(17.25, 13.54)];
                [bezierPath addLineToPoint: CGPointMake(17.25, 21.3)];
                [bezierPath addLineToPoint: CGPointMake(20.35, 28.67)];
                [bezierPath addLineToPoint: CGPointMake(20.39, 28.77)];
                [bezierPath addCurveToPoint: CGPointMake(21.25, 33.66) controlPoint1: CGPointMake(20.96, 30.34) controlPoint2: CGPointMake(21.25, 32)];
                [bezierPath addLineToPoint: CGPointMake(21.25, 113.47)];
                [bezierPath addLineToPoint: CGPointMake(21.25, 113.47)];
                [bezierPath addCurveToPoint: CGPointMake(20.5, 114.22) controlPoint1: CGPointMake(21.25, 113.88) controlPoint2: CGPointMake(20.91, 114.22)];
                [bezierPath addLineToPoint: CGPointMake(1.5, 114.2)];
                [bezierPath closePath];
                [toolFillColor setFill];
                [bezierPath fill];


                //// Bezier 2 Drawing
                UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
                [bezier2Path moveToPoint: CGPointMake(16.5, 13.95)];
                [bezier2Path addLineToPoint: CGPointMake(16.5, 21.45)];
                [bezier2Path addLineToPoint: CGPointMake(19.66, 29)];
                [bezier2Path addLineToPoint: CGPointMake(19.68, 29.06)];
                [bezier2Path addCurveToPoint: CGPointMake(20.5, 33.7) controlPoint1: CGPointMake(20.22, 30.55) controlPoint2: CGPointMake(20.5, 32.12)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 113.49)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 113.49)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 33.65)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 33.7)];
                [bezier2Path addCurveToPoint: CGPointMake(2.32, 29.06) controlPoint1: CGPointMake(1.5, 32.12) controlPoint2: CGPointMake(1.78, 30.55)];
                [bezier2Path addLineToPoint: CGPointMake(5.5, 21.45)];
                [bezier2Path addLineToPoint: CGPointMake(5.5, 13.95)];
                [bezier2Path addLineToPoint: CGPointMake(16.5, 13.95)];
                [bezier2Path closePath];
                [bezier2Path moveToPoint: CGPointMake(16.5, 12.45)];
                [bezier2Path addLineToPoint: CGPointMake(5.5, 12.45)];
                [bezier2Path addLineToPoint: CGPointMake(5.5, 12.45)];
                [bezier2Path addCurveToPoint: CGPointMake(4, 13.95) controlPoint1: CGPointMake(4.67, 12.45) controlPoint2: CGPointMake(4, 13.12)];
                [bezier2Path addLineToPoint: CGPointMake(4, 21.15)];
                [bezier2Path addLineToPoint: CGPointMake(1, 28.38)];
                [bezier2Path addLineToPoint: CGPointMake(1, 28.44)];
                [bezier2Path addLineToPoint: CGPointMake(1, 28.45)];
                [bezier2Path addCurveToPoint: CGPointMake(0, 33.57) controlPoint1: CGPointMake(0.37, 30.09) controlPoint2: CGPointMake(0.03, 31.82)];
                [bezier2Path addLineToPoint: CGPointMake(0, 113.45)];
                [bezier2Path addLineToPoint: CGPointMake(0, 113.45)];
                [bezier2Path addCurveToPoint: CGPointMake(1.5, 114.95) controlPoint1: CGPointMake(0, 114.28) controlPoint2: CGPointMake(0.67, 114.95)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 114.95)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 114.95)];
                [bezier2Path addCurveToPoint: CGPointMake(22, 113.45) controlPoint1: CGPointMake(21.33, 114.95) controlPoint2: CGPointMake(22, 114.28)];
                [bezier2Path addLineToPoint: CGPointMake(22, 33.65)];
                [bezier2Path addLineToPoint: CGPointMake(22, 33.64)];
                [bezier2Path addCurveToPoint: CGPointMake(21.1, 28.51) controlPoint1: CGPointMake(22, 31.89) controlPoint2: CGPointMake(21.69, 30.15)];
                [bezier2Path addLineToPoint: CGPointMake(21.07, 28.38)];
                [bezier2Path addLineToPoint: CGPointMake(18.07, 21.15)];
                [bezier2Path addLineToPoint: CGPointMake(18.07, 13.95)];
                [bezier2Path addLineToPoint: CGPointMake(18.07, 13.95)];
                [bezier2Path addCurveToPoint: CGPointMake(16.57, 12.45) controlPoint1: CGPointMake(18.07, 13.12) controlPoint2: CGPointMake(17.4, 12.45)];
                [bezier2Path addLineToPoint: CGPointMake(16.5, 12.45)];
                [bezier2Path closePath];
                [toolStrokeColor setFill];
                [bezier2Path fill];


                //// Bezier 3 Drawing
                UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
                [bezier3Path moveToPoint: CGPointMake(1.5, 32.09)];
                [bezier3Path addLineToPoint: CGPointMake(20.5, 32.09)];
                [toolFillColor setFill];
                [bezier3Path fill];
                [toolStrokeColor setStroke];
                bezier3Path.lineWidth = 1;
                bezier3Path.miterLimit = 4;
                bezier3Path.lineCapStyle = kCGLineCapRound;
                bezier3Path.lineJoinStyle = kCGLineJoinRound;
                [bezier3Path stroke];


                //// Bezier 4 Drawing
                UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
                [bezier4Path moveToPoint: CGPointMake(5.5, 11)];
                [bezier4Path addLineToPoint: CGPointMake(16.5, 11)];
                [bezier4Path addLineToPoint: CGPointMake(16.5, 1)];
                [bezier4Path addLineToPoint: CGPointMake(16.5, 1)];
                [bezier4Path addCurveToPoint: CGPointMake(15.5, 0) controlPoint1: CGPointMake(16.5, 0.45) controlPoint2: CGPointMake(16.05, 0)];
                [bezier4Path addCurveToPoint: CGPointMake(15.09, 0.09) controlPoint1: CGPointMake(15.36, 0) controlPoint2: CGPointMake(15.22, 0.03)];
                [bezier4Path addLineToPoint: CGPointMake(6.09, 4.18)];
                [bezier4Path addLineToPoint: CGPointMake(6.09, 4.18)];
                [bezier4Path addCurveToPoint: CGPointMake(5.5, 5.09) controlPoint1: CGPointMake(5.73, 4.34) controlPoint2: CGPointMake(5.5, 4.7)];
                [bezier4Path addLineToPoint: CGPointMake(5.5, 11)];
                [bezier4Path closePath];
                [pointFillColor setFill];
                [bezier4Path fill];


                //// Bezier 5 Drawing
                UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
                [bezier5Path moveToPoint: CGPointMake(17, 72.95)];
                [bezier5Path addLineToPoint: CGPointMake(17, 35.95)];
                [toolStrokeColor setStroke];
                bezier5Path.lineWidth = 1;
                bezier5Path.miterLimit = 4;
                bezier5Path.lineCapStyle = kCGLineCapRound;
                bezier5Path.lineJoinStyle = kCGLineJoinRound;
                [bezier5Path stroke];


                //// Bezier 6 Drawing
                UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
                [bezier6Path moveToPoint: CGPointMake(6, 10.5)];
                [bezier6Path addLineToPoint: CGPointMake(16, 10.5)];
                [bezier6Path addLineToPoint: CGPointMake(16, 1.46)];
                [bezier6Path addCurveToPoint: CGPointMake(15.5, 0.5) controlPoint1: CGPointMake(16, 0.93) controlPoint2: CGPointMake(16.05, 0.5)];
                [bezier6Path addCurveToPoint: CGPointMake(15.09, 0.58) controlPoint1: CGPointMake(15.36, 0.5) controlPoint2: CGPointMake(15.22, 0.53)];
                [bezier6Path addLineToPoint: CGPointMake(7.5, 4)];
                [bezier6Path addCurveToPoint: CGPointMake(6, 5) controlPoint1: CGPointMake(7.14, 4.15) controlPoint2: CGPointMake(6, 4.62)];
                [bezier6Path addLineToPoint: CGPointMake(6, 10.5)];
                [bezier6Path closePath];
                [pointStrokeColor setStroke];
                bezier6Path.lineWidth = 1;
                bezier6Path.miterLimit = 4;
                [bezier6Path stroke];
            }
        }
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawPenToolStrokeWithToolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor pointStrokeColor: (UIColor*)pointStrokeColor
{
    [SFSketchIconsKit drawPenToolStrokeWithFrame: CGRectMake(0, 0, 22, 116) resizing: SFSketchIconsKitResizingBehaviorStretch toolFillColor: toolFillColor pointFillColor: pointFillColor toolStrokeColor: toolStrokeColor pointStrokeColor: pointStrokeColor];
}

+ (void)drawPenToolStrokeWithFrame: (CGRect)targetFrame resizing: (SFSketchIconsKitResizingBehavior)resizing toolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor pointStrokeColor: (UIColor*)pointStrokeColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = SFSketchIconsKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 22, 116), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 22, resizedFrame.size.height / 116);


    //// Layer_2
    {
        //// Layer_1-2
        {
            //// Pen
            {
                //// Bezier Drawing
                UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                [bezierPath moveToPoint: CGPointMake(1.5, 114.33)];
                [bezierPath addLineToPoint: CGPointMake(1.5, 114.33)];
                [bezierPath addCurveToPoint: CGPointMake(0.75, 113.58) controlPoint1: CGPointMake(1.09, 114.33) controlPoint2: CGPointMake(0.75, 113.99)];
                [bezierPath addLineToPoint: CGPointMake(0.75, 36.48)];
                [bezierPath addLineToPoint: CGPointMake(0.75, 36.47)];
                [bezierPath addCurveToPoint: CGPointMake(1.55, 30.75) controlPoint1: CGPointMake(0.75, 34.53) controlPoint2: CGPointMake(1.02, 32.61)];
                [bezierPath addLineToPoint: CGPointMake(6.85, 12.87)];
                [bezierPath addLineToPoint: CGPointMake(6.85, 12.87)];
                [bezierPath addCurveToPoint: CGPointMake(7.57, 12.33) controlPoint1: CGPointMake(6.94, 12.55) controlPoint2: CGPointMake(7.24, 12.33)];
                [bezierPath addLineToPoint: CGPointMake(14.42, 12.33)];
                [bezierPath addLineToPoint: CGPointMake(14.42, 12.33)];
                [bezierPath addCurveToPoint: CGPointMake(15.14, 12.87) controlPoint1: CGPointMake(14.75, 12.33) controlPoint2: CGPointMake(15.05, 12.55)];
                [bezierPath addLineToPoint: CGPointMake(20.4, 30.59)];
                [bezierPath addLineToPoint: CGPointMake(20.45, 30.75)];
                [bezierPath addCurveToPoint: CGPointMake(21.25, 36.47) controlPoint1: CGPointMake(20.98, 32.61) controlPoint2: CGPointMake(21.25, 34.53)];
                [bezierPath addLineToPoint: CGPointMake(21.25, 113.58)];
                [bezierPath addLineToPoint: CGPointMake(21.25, 113.58)];
                [bezierPath addCurveToPoint: CGPointMake(20.5, 114.33) controlPoint1: CGPointMake(21.25, 113.99) controlPoint2: CGPointMake(20.91, 114.33)];
                [bezierPath addLineToPoint: CGPointMake(1.5, 114.33)];
                [bezierPath closePath];
                [toolFillColor setFill];
                [bezierPath fill];


                //// Bezier 2 Drawing
                UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
                [bezier2Path moveToPoint: CGPointMake(14.43, 13.08)];
                [bezier2Path addLineToPoint: CGPointMake(19.68, 30.8)];
                [bezier2Path addLineToPoint: CGPointMake(19.73, 30.96)];
                [bezier2Path addCurveToPoint: CGPointMake(20.5, 36.47) controlPoint1: CGPointMake(20.24, 32.75) controlPoint2: CGPointMake(20.5, 34.6)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 113.58)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 113.58)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 36.48)];
                [bezier2Path addLineToPoint: CGPointMake(1.5, 36.47)];
                [bezier2Path addCurveToPoint: CGPointMake(2.27, 30.96) controlPoint1: CGPointMake(1.5, 34.6) controlPoint2: CGPointMake(1.76, 32.75)];
                [bezier2Path addLineToPoint: CGPointMake(7.57, 13.08)];
                [bezier2Path addLineToPoint: CGPointMake(14.42, 13.08)];
                [bezier2Path moveToPoint: CGPointMake(14.42, 11.58)];
                [bezier2Path addLineToPoint: CGPointMake(7.57, 11.58)];
                [bezier2Path addLineToPoint: CGPointMake(7.57, 11.58)];
                [bezier2Path addCurveToPoint: CGPointMake(6.13, 12.64) controlPoint1: CGPointMake(6.91, 11.58) controlPoint2: CGPointMake(6.33, 12.01)];
                [bezier2Path addLineToPoint: CGPointMake(0.89, 30.37)];
                [bezier2Path addLineToPoint: CGPointMake(0.94, 30.21)];
                [bezier2Path addCurveToPoint: CGPointMake(-0, 36.49) controlPoint1: CGPointMake(0.32, 32.24) controlPoint2: CGPointMake(-0, 34.36)];
                [bezier2Path addLineToPoint: CGPointMake(0, 113.58)];
                [bezier2Path addLineToPoint: CGPointMake(0, 113.58)];
                [bezier2Path addCurveToPoint: CGPointMake(1.5, 115.08) controlPoint1: CGPointMake(0, 114.41) controlPoint2: CGPointMake(0.67, 115.08)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 115.08)];
                [bezier2Path addLineToPoint: CGPointMake(20.5, 115.08)];
                [bezier2Path addCurveToPoint: CGPointMake(22, 113.58) controlPoint1: CGPointMake(21.33, 115.08) controlPoint2: CGPointMake(22, 114.41)];
                [bezier2Path addLineToPoint: CGPointMake(22, 36.48)];
                [bezier2Path addLineToPoint: CGPointMake(22, 36.49)];
                [bezier2Path addCurveToPoint: CGPointMake(21.06, 30.21) controlPoint1: CGPointMake(22, 34.36) controlPoint2: CGPointMake(21.68, 32.24)];
                [bezier2Path addLineToPoint: CGPointMake(15.87, 12.65)];
                [bezier2Path addLineToPoint: CGPointMake(15.87, 12.64)];
                [bezier2Path addCurveToPoint: CGPointMake(14.43, 11.58) controlPoint1: CGPointMake(15.67, 12.01) controlPoint2: CGPointMake(15.09, 11.58)];
                [bezier2Path addLineToPoint: CGPointMake(14.42, 11.58)];
                [bezier2Path closePath];
                [toolStrokeColor setFill];
                [bezier2Path fill];


                //// Bezier 3 Drawing
                UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
                [bezier3Path moveToPoint: CGPointMake(1, 34.08)];
                [bezier3Path addLineToPoint: CGPointMake(21, 34.08)];
                [toolFillColor setFill];
                [bezier3Path fill];
                [toolStrokeColor setStroke];
                bezier3Path.lineWidth = 1;
                bezier3Path.miterLimit = 4;
                bezier3Path.lineCapStyle = kCGLineCapRound;
                bezier3Path.lineJoinStyle = kCGLineJoinRound;
                [bezier3Path stroke];


                //// Bezier 4 Drawing
                UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
                [bezier4Path moveToPoint: CGPointMake(17.25, 76.52)];
                [bezier4Path addLineToPoint: CGPointMake(17.25, 37.78)];
                [toolStrokeColor setStroke];
                bezier4Path.lineWidth = 1.5;
                bezier4Path.miterLimit = 4;
                bezier4Path.lineCapStyle = kCGLineCapRound;
                bezier4Path.lineJoinStyle = kCGLineJoinRound;
                [bezier4Path stroke];


                //// Bezier 5 Drawing
                UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
                [bezier5Path moveToPoint: CGPointMake(12.44, 1.08)];
                [bezier5Path addLineToPoint: CGPointMake(12.44, 1.09)];
                [bezier5Path addCurveToPoint: CGPointMake(10.59, 0.06) controlPoint1: CGPointMake(12.21, 0.29) controlPoint2: CGPointMake(11.38, -0.17)];
                [bezier5Path addCurveToPoint: CGPointMake(9.57, 1.06) controlPoint1: CGPointMake(10.1, 0.2) controlPoint2: CGPointMake(9.71, 0.58)];
                [bezier5Path addLineToPoint: CGPointMake(6.75, 10.5)];
                [bezier5Path addLineToPoint: CGPointMake(15.25, 10.5)];
                [bezier5Path addLineToPoint: CGPointMake(12.44, 1.08)];
                [bezier5Path closePath];
                [pointFillColor setFill];
                [bezier5Path fill];


                //// Bezier 6 Drawing
                UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
                [bezier6Path moveToPoint: CGPointMake(12, 1.48)];
                [bezier6Path addCurveToPoint: CGPointMake(10.89, 0.55) controlPoint1: CGPointMake(12, 1.48) controlPoint2: CGPointMake(11.59, 0.35)];
                [bezier6Path addCurveToPoint: CGPointMake(9.98, 1.46) controlPoint1: CGPointMake(10.45, 0.68) controlPoint2: CGPointMake(10.12, 1.02)];
                [bezier6Path addLineToPoint: CGPointMake(7.5, 10)];
                [bezier6Path addLineToPoint: CGPointMake(14.5, 10)];
                [bezier6Path addLineToPoint: CGPointMake(12, 1.48)];
                [bezier6Path closePath];
                [pointStrokeColor setStroke];
                bezier6Path.lineWidth = 1;
                bezier6Path.miterLimit = 4;
                [bezier6Path stroke];
            }
        }
    }
    
    CGContextRestoreGState(context);

}

#pragma mark Generated Images

+ (UIImage*)imageOfEraserToolWithToolFillColor: (UIColor*)toolFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(32, 96), NO, 0);
    [SFSketchIconsKit drawEraserToolWithToolFillColor: toolFillColor toolStrokeColor: toolStrokeColor];

    UIImage* imageOfEraserTool = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfEraserTool;
}

+ (UIImage*)imageOfPenToolWithToolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(22, 116), NO, 0);
    [SFSketchIconsKit drawPenToolWithToolFillColor: toolFillColor pointFillColor: pointFillColor toolStrokeColor: toolStrokeColor];

    UIImage* imageOfPenTool = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfPenTool;
}

+ (UIImage*)imageOfMarkerToolWithToolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(22, 115), NO, 0);
    [SFSketchIconsKit drawMarkerToolWithToolFillColor: toolFillColor pointFillColor: pointFillColor toolStrokeColor: toolStrokeColor];

    UIImage* imageOfMarkerTool = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfMarkerTool;
}

+ (UIImage*)imageOfColorToolWithSize: (CGSize)imageSize toolFillColor: (UIColor*)toolFillColor toolStrokeColor: (UIColor*)toolStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(imageSize, NO, 0);
    [SFSketchIconsKit drawColorToolWithFrame: CGRectMake(0, 0, imageSize.width, imageSize.height) toolFillColor: toolFillColor toolStrokeColor: toolStrokeColor];

    UIImage* imageOfColorTool = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfColorTool;
}

+ (UIImage*)imageOfPointToolWithSize: (CGSize)imageSize toolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor pointStrokeColor: (UIColor*)pointStrokeColor pointRect: (CGRect)pointRect strokePointRect: (CGRect)strokePointRect
{
    UIGraphicsBeginImageContextWithOptions(imageSize, NO, 0);
    [SFSketchIconsKit drawPointToolWithFrame: CGRectMake(0, 0, imageSize.width, imageSize.height) toolFillColor: toolFillColor pointFillColor: pointFillColor toolStrokeColor: toolStrokeColor pointStrokeColor: pointStrokeColor pointRect: pointRect strokePointRect: strokePointRect];

    UIImage* imageOfPointTool = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfPointTool;
}

+ (UIImage*)imageOfCloseIconWithToolStrokeColor: (UIColor*)toolStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0);
    [SFSketchIconsKit drawCloseIconWithToolStrokeColor: toolStrokeColor];

    UIImage* imageOfCloseIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfCloseIcon;
}

+ (UIImage*)imageOfRedoIconWithIconStrokeColor: (UIColor*)iconStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 30), NO, 0);
    [SFSketchIconsKit drawRedoIconWithIconStrokeColor: iconStrokeColor];

    UIImage* imageOfRedoIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfRedoIcon;
}

+ (UIImage*)imageOfUndoIconWithIconStrokeColor: (UIColor*)iconStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 30), NO, 0);
    [SFSketchIconsKit drawUndoIconWithIconStrokeColor: iconStrokeColor];

    UIImage* imageOfUndoIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfUndoIcon;
}

+ (UIImage*)imageOfBackIconWithIconStrokeColor: (UIColor*)iconStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 30), NO, 0);
    [SFSketchIconsKit drawBackIconWithIconStrokeColor: iconStrokeColor];

    UIImage* imageOfBackIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfBackIcon;
}

+ (UIImage*)imageOfShareIconWithIconStrokeColor: (UIColor*)iconStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(19, 30), NO, 0);
    [SFSketchIconsKit drawShareIconWithIconStrokeColor: iconStrokeColor];

    UIImage* imageOfShareIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfShareIcon;
}

+ (UIImage*)imageOfMarkerToolStrokeWithToolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor pointStrokeColor: (UIColor*)pointStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(22, 115), NO, 0);
    [SFSketchIconsKit drawMarkerToolStrokeWithToolFillColor: toolFillColor pointFillColor: pointFillColor toolStrokeColor: toolStrokeColor pointStrokeColor: pointStrokeColor];

    UIImage* imageOfMarkerToolStroke = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfMarkerToolStroke;
}

+ (UIImage*)imageOfPenToolStrokeWithToolFillColor: (UIColor*)toolFillColor pointFillColor: (UIColor*)pointFillColor toolStrokeColor: (UIColor*)toolStrokeColor pointStrokeColor: (UIColor*)pointStrokeColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(22, 116), NO, 0);
    [SFSketchIconsKit drawPenToolStrokeWithToolFillColor: toolFillColor pointFillColor: pointFillColor toolStrokeColor: toolStrokeColor pointStrokeColor: pointStrokeColor];

    UIImage* imageOfPenToolStroke = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfPenToolStroke;
}

@end



CGRect SFSketchIconsKitResizingBehaviorApply(SFSketchIconsKitResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
        return rect;

    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);

    switch (behavior)
    {
        case SFSketchIconsKitResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case SFSketchIconsKitResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case SFSketchIconsKitResizingBehaviorStretch:
            break;
        case SFSketchIconsKitResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }

    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}
